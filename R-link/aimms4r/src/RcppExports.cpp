/*  This file is part of R-Link.

    R-Link is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    R-Link is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with R-Link.  If not, see <http://www.gnu.org/licenses/>.

*/
// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// LoadAimmsAndOpenProject
bool LoadAimmsAndOpenProject(std::wstring path, std::wstring projectPath);
RcppExport SEXP aimms4r_LoadAimmsAndOpenProject(SEXP pathSEXP, SEXP projectPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::wstring >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::wstring >::type projectPath(projectPathSEXP);
    rcpp_result_gen = Rcpp::wrap(LoadAimmsAndOpenProject(path, projectPath));
    return rcpp_result_gen;
END_RCPP
}
// LoadAimms
bool LoadAimms(std::wstring path);
RcppExport SEXP aimms4r_LoadAimms(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::wstring >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(LoadAimms(path));
    return rcpp_result_gen;
END_RCPP
}
// OpenProject
bool OpenProject(std::wstring projectPath);
RcppExport SEXP aimms4r_OpenProject(SEXP projectPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::wstring >::type projectPath(projectPathSEXP);
    rcpp_result_gen = Rcpp::wrap(OpenProject(projectPath));
    return rcpp_result_gen;
END_RCPP
}
// CloseProject
bool CloseProject();
RcppExport SEXP aimms4r_CloseProject() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(CloseProject());
    return rcpp_result_gen;
END_RCPP
}
// TestLoadedApi
bool TestLoadedApi(std::wstring path);
RcppExport SEXP aimms4r_TestLoadedApi(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::wstring >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(TestLoadedApi(path));
    return rcpp_result_gen;
END_RCPP
}
// GetData
SEXP GetData(std::wstring identifierName);
RcppExport SEXP aimms4r_GetData(SEXP identifierNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::wstring >::type identifierName(identifierNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetData(identifierName));
    return rcpp_result_gen;
END_RCPP
}
// SetData
void SetData(SEXP data, std::wstring identifierName);
RcppExport SEXP aimms4r_SetData(SEXP dataSEXP, SEXP identifierNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::wstring >::type identifierName(identifierNameSEXP);
    SetData(data, identifierName);
    return R_NilValue;
END_RCPP
}
